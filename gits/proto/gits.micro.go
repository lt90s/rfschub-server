// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gits.proto

package gits

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Gits service

type GitsService interface {
	// clone a repository
	Clone(ctx context.Context, in *CloneRequest, opts ...client.CallOption) (*CloneResponse, error)
	// query clone status
	GetCloneStatus(ctx context.Context, in *GetCloneStatusRequest, opts ...client.CallOption) (*GetCloneStatusResponse, error)
	// get archive
	Archive(ctx context.Context, in *ArchiveRequest, opts ...client.CallOption) (Gits_ArchiveService, error)
	// get all branches and tags
	GetNamedCommits(ctx context.Context, in *GetNamedCommitsRequest, opts ...client.CallOption) (*GetNamedCommitsResponse, error)
	// get all files
	GetRepositoryFiles(ctx context.Context, in *GetRepositoryFilesRequest, opts ...client.CallOption) (*GetRepositoryFilesResponse, error)
	// get file content
	GetRepositoryBlob(ctx context.Context, in *GetRepositoryBlobRequest, opts ...client.CallOption) (*GetRepositoryBlobResponse, error)
}

type gitsService struct {
	c    client.Client
	name string
}

func NewGitsService(name string, c client.Client) GitsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gits"
	}
	return &gitsService{
		c:    c,
		name: name,
	}
}

func (c *gitsService) Clone(ctx context.Context, in *CloneRequest, opts ...client.CallOption) (*CloneResponse, error) {
	req := c.c.NewRequest(c.name, "Gits.Clone", in)
	out := new(CloneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsService) GetCloneStatus(ctx context.Context, in *GetCloneStatusRequest, opts ...client.CallOption) (*GetCloneStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Gits.GetCloneStatus", in)
	out := new(GetCloneStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsService) Archive(ctx context.Context, in *ArchiveRequest, opts ...client.CallOption) (Gits_ArchiveService, error) {
	req := c.c.NewRequest(c.name, "Gits.Archive", &ArchiveRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gitsServiceArchive{stream}, nil
}

type Gits_ArchiveService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ArchiveResponse, error)
}

type gitsServiceArchive struct {
	stream client.Stream
}

func (x *gitsServiceArchive) Close() error {
	return x.stream.Close()
}

func (x *gitsServiceArchive) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gitsServiceArchive) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gitsServiceArchive) Recv() (*ArchiveResponse, error) {
	m := new(ArchiveResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitsService) GetNamedCommits(ctx context.Context, in *GetNamedCommitsRequest, opts ...client.CallOption) (*GetNamedCommitsResponse, error) {
	req := c.c.NewRequest(c.name, "Gits.GetNamedCommits", in)
	out := new(GetNamedCommitsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsService) GetRepositoryFiles(ctx context.Context, in *GetRepositoryFilesRequest, opts ...client.CallOption) (*GetRepositoryFilesResponse, error) {
	req := c.c.NewRequest(c.name, "Gits.GetRepositoryFiles", in)
	out := new(GetRepositoryFilesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsService) GetRepositoryBlob(ctx context.Context, in *GetRepositoryBlobRequest, opts ...client.CallOption) (*GetRepositoryBlobResponse, error) {
	req := c.c.NewRequest(c.name, "Gits.GetRepositoryBlob", in)
	out := new(GetRepositoryBlobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gits service

type GitsHandler interface {
	// clone a repository
	Clone(context.Context, *CloneRequest, *CloneResponse) error
	// query clone status
	GetCloneStatus(context.Context, *GetCloneStatusRequest, *GetCloneStatusResponse) error
	// get archive
	Archive(context.Context, *ArchiveRequest, Gits_ArchiveStream) error
	// get all branches and tags
	GetNamedCommits(context.Context, *GetNamedCommitsRequest, *GetNamedCommitsResponse) error
	// get all files
	GetRepositoryFiles(context.Context, *GetRepositoryFilesRequest, *GetRepositoryFilesResponse) error
	// get file content
	GetRepositoryBlob(context.Context, *GetRepositoryBlobRequest, *GetRepositoryBlobResponse) error
}

func RegisterGitsHandler(s server.Server, hdlr GitsHandler, opts ...server.HandlerOption) error {
	type gits interface {
		Clone(ctx context.Context, in *CloneRequest, out *CloneResponse) error
		GetCloneStatus(ctx context.Context, in *GetCloneStatusRequest, out *GetCloneStatusResponse) error
		Archive(ctx context.Context, stream server.Stream) error
		GetNamedCommits(ctx context.Context, in *GetNamedCommitsRequest, out *GetNamedCommitsResponse) error
		GetRepositoryFiles(ctx context.Context, in *GetRepositoryFilesRequest, out *GetRepositoryFilesResponse) error
		GetRepositoryBlob(ctx context.Context, in *GetRepositoryBlobRequest, out *GetRepositoryBlobResponse) error
	}
	type Gits struct {
		gits
	}
	h := &gitsHandler{hdlr}
	return s.Handle(s.NewHandler(&Gits{h}, opts...))
}

type gitsHandler struct {
	GitsHandler
}

func (h *gitsHandler) Clone(ctx context.Context, in *CloneRequest, out *CloneResponse) error {
	return h.GitsHandler.Clone(ctx, in, out)
}

func (h *gitsHandler) GetCloneStatus(ctx context.Context, in *GetCloneStatusRequest, out *GetCloneStatusResponse) error {
	return h.GitsHandler.GetCloneStatus(ctx, in, out)
}

func (h *gitsHandler) Archive(ctx context.Context, stream server.Stream) error {
	m := new(ArchiveRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GitsHandler.Archive(ctx, m, &gitsArchiveStream{stream})
}

type Gits_ArchiveStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ArchiveResponse) error
}

type gitsArchiveStream struct {
	stream server.Stream
}

func (x *gitsArchiveStream) Close() error {
	return x.stream.Close()
}

func (x *gitsArchiveStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gitsArchiveStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gitsArchiveStream) Send(m *ArchiveResponse) error {
	return x.stream.Send(m)
}

func (h *gitsHandler) GetNamedCommits(ctx context.Context, in *GetNamedCommitsRequest, out *GetNamedCommitsResponse) error {
	return h.GitsHandler.GetNamedCommits(ctx, in, out)
}

func (h *gitsHandler) GetRepositoryFiles(ctx context.Context, in *GetRepositoryFilesRequest, out *GetRepositoryFilesResponse) error {
	return h.GitsHandler.GetRepositoryFiles(ctx, in, out)
}

func (h *gitsHandler) GetRepositoryBlob(ctx context.Context, in *GetRepositoryBlobRequest, out *GetRepositoryBlobResponse) error {
	return h.GitsHandler.GetRepositoryBlob(ctx, in, out)
}
