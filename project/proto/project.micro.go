// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: project.proto

package project

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Project service

type ProjectService interface {
	NewProject(ctx context.Context, in *NewProjectRequest, opts ...client.CallOption) (*NewProjectResponse, error)
	ProjectInfo(ctx context.Context, in *ProjectInfoRequest, opts ...client.CallOption) (*ProjectInfoResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error)
	AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...client.CallOption) (*AddAnnotationResponse, error)
	GetAnnotationLines(ctx context.Context, in *GetAnnotationLinesRequest, opts ...client.CallOption) (*GetAnnotationLinesResponse, error)
	GetAnnotations(ctx context.Context, in *GetAnnotationsRequest, opts ...client.CallOption) (*GetAnnotationsResponse, error)
	GetLatestAnnotations(ctx context.Context, in *GetLatestAnnotationsRequest, opts ...client.CallOption) (*GetLatestAnnotationsResponse, error)
}

type projectService struct {
	c    client.Client
	name string
}

func NewProjectService(name string, c client.Client) ProjectService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "project"
	}
	return &projectService{
		c:    c,
		name: name,
	}
}

func (c *projectService) NewProject(ctx context.Context, in *NewProjectRequest, opts ...client.CallOption) (*NewProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.NewProject", in)
	out := new(NewProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ProjectInfo(ctx context.Context, in *ProjectInfoRequest, opts ...client.CallOption) (*ProjectInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Project.ProjectInfo", in)
	out := new(ProjectInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error) {
	req := c.c.NewRequest(c.name, "Project.ListProjects", in)
	out := new(ListProjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...client.CallOption) (*AddAnnotationResponse, error) {
	req := c.c.NewRequest(c.name, "Project.AddAnnotation", in)
	out := new(AddAnnotationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetAnnotationLines(ctx context.Context, in *GetAnnotationLinesRequest, opts ...client.CallOption) (*GetAnnotationLinesResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetAnnotationLines", in)
	out := new(GetAnnotationLinesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetAnnotations(ctx context.Context, in *GetAnnotationsRequest, opts ...client.CallOption) (*GetAnnotationsResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetAnnotations", in)
	out := new(GetAnnotationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetLatestAnnotations(ctx context.Context, in *GetLatestAnnotationsRequest, opts ...client.CallOption) (*GetLatestAnnotationsResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetLatestAnnotations", in)
	out := new(GetLatestAnnotationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Project service

type ProjectHandler interface {
	NewProject(context.Context, *NewProjectRequest, *NewProjectResponse) error
	ProjectInfo(context.Context, *ProjectInfoRequest, *ProjectInfoResponse) error
	ListProjects(context.Context, *ListProjectsRequest, *ListProjectsResponse) error
	AddAnnotation(context.Context, *AddAnnotationRequest, *AddAnnotationResponse) error
	GetAnnotationLines(context.Context, *GetAnnotationLinesRequest, *GetAnnotationLinesResponse) error
	GetAnnotations(context.Context, *GetAnnotationsRequest, *GetAnnotationsResponse) error
	GetLatestAnnotations(context.Context, *GetLatestAnnotationsRequest, *GetLatestAnnotationsResponse) error
}

func RegisterProjectHandler(s server.Server, hdlr ProjectHandler, opts ...server.HandlerOption) error {
	type project interface {
		NewProject(ctx context.Context, in *NewProjectRequest, out *NewProjectResponse) error
		ProjectInfo(ctx context.Context, in *ProjectInfoRequest, out *ProjectInfoResponse) error
		ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error
		AddAnnotation(ctx context.Context, in *AddAnnotationRequest, out *AddAnnotationResponse) error
		GetAnnotationLines(ctx context.Context, in *GetAnnotationLinesRequest, out *GetAnnotationLinesResponse) error
		GetAnnotations(ctx context.Context, in *GetAnnotationsRequest, out *GetAnnotationsResponse) error
		GetLatestAnnotations(ctx context.Context, in *GetLatestAnnotationsRequest, out *GetLatestAnnotationsResponse) error
	}
	type Project struct {
		project
	}
	h := &projectHandler{hdlr}
	return s.Handle(s.NewHandler(&Project{h}, opts...))
}

type projectHandler struct {
	ProjectHandler
}

func (h *projectHandler) NewProject(ctx context.Context, in *NewProjectRequest, out *NewProjectResponse) error {
	return h.ProjectHandler.NewProject(ctx, in, out)
}

func (h *projectHandler) ProjectInfo(ctx context.Context, in *ProjectInfoRequest, out *ProjectInfoResponse) error {
	return h.ProjectHandler.ProjectInfo(ctx, in, out)
}

func (h *projectHandler) ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error {
	return h.ProjectHandler.ListProjects(ctx, in, out)
}

func (h *projectHandler) AddAnnotation(ctx context.Context, in *AddAnnotationRequest, out *AddAnnotationResponse) error {
	return h.ProjectHandler.AddAnnotation(ctx, in, out)
}

func (h *projectHandler) GetAnnotationLines(ctx context.Context, in *GetAnnotationLinesRequest, out *GetAnnotationLinesResponse) error {
	return h.ProjectHandler.GetAnnotationLines(ctx, in, out)
}

func (h *projectHandler) GetAnnotations(ctx context.Context, in *GetAnnotationsRequest, out *GetAnnotationsResponse) error {
	return h.ProjectHandler.GetAnnotations(ctx, in, out)
}

func (h *projectHandler) GetLatestAnnotations(ctx context.Context, in *GetLatestAnnotationsRequest, out *GetLatestAnnotationsResponse) error {
	return h.ProjectHandler.GetLatestAnnotations(ctx, in, out)
}
