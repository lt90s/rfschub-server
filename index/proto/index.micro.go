// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: index.proto

package index

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Index service

type IndexService interface {
	IndexRepository(ctx context.Context, in *IndexRepositoryRequest, opts ...client.CallOption) (*IndexRepositoryResponse, error)
	IndexStatus(ctx context.Context, in *IndexStatusRequest, opts ...client.CallOption) (*IndexStatusResponse, error)
	SearchSymbol(ctx context.Context, in *SearchSymbolRequest, opts ...client.CallOption) (*SearchSymbolResponse, error)
}

type indexService struct {
	c    client.Client
	name string
}

func NewIndexService(name string, c client.Client) IndexService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "index"
	}
	return &indexService{
		c:    c,
		name: name,
	}
}

func (c *indexService) IndexRepository(ctx context.Context, in *IndexRepositoryRequest, opts ...client.CallOption) (*IndexRepositoryResponse, error) {
	req := c.c.NewRequest(c.name, "Index.IndexRepository", in)
	out := new(IndexRepositoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexService) IndexStatus(ctx context.Context, in *IndexStatusRequest, opts ...client.CallOption) (*IndexStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Index.IndexStatus", in)
	out := new(IndexStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexService) SearchSymbol(ctx context.Context, in *SearchSymbolRequest, opts ...client.CallOption) (*SearchSymbolResponse, error) {
	req := c.c.NewRequest(c.name, "Index.SearchSymbol", in)
	out := new(SearchSymbolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Index service

type IndexHandler interface {
	IndexRepository(context.Context, *IndexRepositoryRequest, *IndexRepositoryResponse) error
	IndexStatus(context.Context, *IndexStatusRequest, *IndexStatusResponse) error
	SearchSymbol(context.Context, *SearchSymbolRequest, *SearchSymbolResponse) error
}

func RegisterIndexHandler(s server.Server, hdlr IndexHandler, opts ...server.HandlerOption) error {
	type index interface {
		IndexRepository(ctx context.Context, in *IndexRepositoryRequest, out *IndexRepositoryResponse) error
		IndexStatus(ctx context.Context, in *IndexStatusRequest, out *IndexStatusResponse) error
		SearchSymbol(ctx context.Context, in *SearchSymbolRequest, out *SearchSymbolResponse) error
	}
	type Index struct {
		index
	}
	h := &indexHandler{hdlr}
	return s.Handle(s.NewHandler(&Index{h}, opts...))
}

type indexHandler struct {
	IndexHandler
}

func (h *indexHandler) IndexRepository(ctx context.Context, in *IndexRepositoryRequest, out *IndexRepositoryResponse) error {
	return h.IndexHandler.IndexRepository(ctx, in, out)
}

func (h *indexHandler) IndexStatus(ctx context.Context, in *IndexStatusRequest, out *IndexStatusResponse) error {
	return h.IndexHandler.IndexStatus(ctx, in, out)
}

func (h *indexHandler) SearchSymbol(ctx context.Context, in *SearchSymbolRequest, out *SearchSymbolResponse) error {
	return h.IndexHandler.SearchSymbol(ctx, in, out)
}
