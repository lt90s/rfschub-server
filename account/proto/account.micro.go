// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

package account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	AccountId(ctx context.Context, in *AccountIdRequest, opts ...client.CallOption) (*AccountIdResponse, error)
	AccountInfoByName(ctx context.Context, in *AccountName, opts ...client.CallOption) (*AccountInfo, error)
	AccountsBasicInfo(ctx context.Context, in *AccountsBasicInfoRequest, opts ...client.CallOption) (*AccountsBasicInfoResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AccountId(ctx context.Context, in *AccountIdRequest, opts ...client.CallOption) (*AccountIdResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AccountId", in)
	out := new(AccountIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AccountInfoByName(ctx context.Context, in *AccountName, opts ...client.CallOption) (*AccountInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.AccountInfoByName", in)
	out := new(AccountInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AccountsBasicInfo(ctx context.Context, in *AccountsBasicInfoRequest, opts ...client.CallOption) (*AccountsBasicInfoResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AccountsBasicInfo", in)
	out := new(AccountsBasicInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	AccountId(context.Context, *AccountIdRequest, *AccountIdResponse) error
	AccountInfoByName(context.Context, *AccountName, *AccountInfo) error
	AccountsBasicInfo(context.Context, *AccountsBasicInfoRequest, *AccountsBasicInfoResponse) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		AccountId(ctx context.Context, in *AccountIdRequest, out *AccountIdResponse) error
		AccountInfoByName(ctx context.Context, in *AccountName, out *AccountInfo) error
		AccountsBasicInfo(ctx context.Context, in *AccountsBasicInfoRequest, out *AccountsBasicInfoResponse) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.AccountServiceHandler.Register(ctx, in, out)
}

func (h *accountServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AccountServiceHandler.Login(ctx, in, out)
}

func (h *accountServiceHandler) AccountId(ctx context.Context, in *AccountIdRequest, out *AccountIdResponse) error {
	return h.AccountServiceHandler.AccountId(ctx, in, out)
}

func (h *accountServiceHandler) AccountInfoByName(ctx context.Context, in *AccountName, out *AccountInfo) error {
	return h.AccountServiceHandler.AccountInfoByName(ctx, in, out)
}

func (h *accountServiceHandler) AccountsBasicInfo(ctx context.Context, in *AccountsBasicInfoRequest, out *AccountsBasicInfoResponse) error {
	return h.AccountServiceHandler.AccountsBasicInfo(ctx, in, out)
}
